# Compiler and assembler defines


#_147
# Kill annoying built-in rules
.SUFFIXES:

# Check for local miner directory
ifndef MINERLOCAL
MINERLOCAL = MINER
endif

# Directory definitions
LIBDIRNET = $(MINER)/source/lib
LIBDIRLOCAL = $(MINERLOCAL)\source\lib
TOOLSDIR = $(MINER)/tools
GAMEDIR = $(MINER)/game

# Where to install libraries
ifdef LIB_SUBDIR
LIBDIRNET_INST = $(LIBDIRNET)/$(LIB_SUBDIR)
LIBDIRLOCAL_INST = $(LIBDIRLOCAL)\$(LIB_SUBDIR)
else
LIBDIRNET_INST = $(LIBDIRNET)
LIBDIRLOCAL_INST = $(LIBDIRLOCAL)
endif



# generate list of objs for each target
$(foreach target,$(LIBS) $(PROGS) $(TEST_PROGS),\
 $(eval $(target)_OBJS = $(addsuffix .obj,$(basename $($(target)_SRCS))))\
)




#_349
# What extensions get installed where
LIBEXT = .lib .h .inc
TOOLSEXT = .exe


#_411
# Generate lists of targets with extentions 
# DLL_DLLS = $(DLLS,<.\\,>.dll)
# TEST_EXES = $(TEST_PROGS,<.\\,>.exe)
LIB_LIBS = $(addsuffix .lib,$(LIBS))
##PROG_EXES = $(PROGS,>.exe)

# Make list of prog exe names, prepending current director as path if none
# %foreach PROG $(PROGS)
# %if "$(PROG,P)" == ""
# %set PROG_EXES := $(PROG_EXES) .\$(PROG).exe
# %else
# %set PROG_EXES := $(PROG_EXES) $(PROG).exe
# %endif

# %endfor

# ALL_EXES = $(TEST_EXES) $(PROG_EXES)

#_429
# Default target if none specified in makefile
.PHONY: all
all:	$(LIB_LIBS) $(PROGS)
	$(call do_subsystems,$(SUBTARGETS))

# Target like all that also builds test progs
.PHONY: test
test .PHONY:	$(LIB_LIBS) $(PROG_EXES) $(TEST_EXES)
	$(error $(TEST_EXES))
	$(call do_subsystems,$(SUBTARGETS))

# Target to make data
.PHONY: data
data .PHONY:	




#_481
# Make sure we're set up for Watcom C
ifndef WATCOM
$(error 1 Make error: Watcom not set up (run WATCOM batch file))
endif

INCPATH += . $(LIBDIRLOCAL) $(EXTLIBS) $(WATCOM)\h $(WATCOM)\h\sys

CC = wcc386
CCENV = WCC386
CFLAGS_STACK = /s	#default is stack checking off
CFLAGS = /zq /zld /w3 /on /oa $(addprefix /I=,$(INCPATH)) $(CFLAGS_DEBUG) $(CFLAGS_OPT) $(GLOBAL_CFLAGS) $(CFLAGS_STACK) $(CFLAGS_MONO)

ifdef GLOBAL_INCFILES
CFLAGS += /fi=$(GLOBAL_INCFILES)
endif

LIBEXE = wlib
LINK = wlink
TOUCH = wtouch


# Flags for MASM 6.1
AS = ml
AFLAGS = /c /W3 /Zd /nologo $(addprefix /I,$(INCPATH)) $(AFLAGS_DEBUG) $(GLOBAL_AFLAGS) /Fo$(@F)
ASENV = ML



#_656
# Inference rules
%.obj: %.c
	$(info will make $@ from $<)
ifdef SHOW_REASONS
	$(warning $(if $(wildcard $@),\
		$(@F) <- $(?F),\
		$(@F) <- (does not exist)\
	))
endif
ifdef CCENV
	$(eval export $(CCENV) = $(CFLAGS) $($T_CFLAGS) $($(<F)_CFLAGS) /fo=$(@F))
 ifdef SHOW_FLAGS
	$(info $(CC) flags: $($(CCENV)))
 endif
	$(CC) $<
else
	$(CC) $(CFLAGS) $($T_CFLAGS) $($(<F)_CFLAGS) $<
endif

%.obj: %.asm
	$(info will make $@ from $<)
ifdef SHOW_REASONS
	$(warning $(if $(wildcard $@),\
		$(@F) <- $(?F)\
	,\
		$(@F) <- (does not exist)\
	))
endif
	$(eval __AFLAGS = $(AFLAGS) $($(@F)_AFLAGS))
ifdef $(ASENV)
	$(eval export $(ASENV) = $(AFLAGS) $($(<F)_AFLAGS))
 ifdef SHOW_FLAGS
	@echo $(AS) flags: $(AFLAGS) $($(<F)_AFLAGS))
 endif
	$(AS) $<
else
	$(AS) $< $(AFLAGS) $($(<F)_AFLAGS))
endif

# macros for literal comma "$," and space "$ "
, := ,
$() $() := $() $()



.SECONDEXPANSION:


#_750
# Build test programs
ifneq '$(ALL_EXES)' ''
$(ALL_EXES): %: $(MAKEFILE_LIST) $$($$*_OBJS) $$($$*_LIBS) $$($$*_DATA)
	$(if $($(@F)_OBJS),,\
		$(error 1 Makefile error: no object files given for test program $(*F))\
	)
 ifdef SHOW_REASONS
	$(warning $(if $(wildcard $@),\
		$(@F) <- $(?F)
	,\
		$(@F) <- (does not exist)\
	))
 endif
	$(file > $(@F).lnk,\
		$(LFLAGS) $($(@F)_LFLAGS) file $(subst $ ,$,\n$ ,$($(@F)_OBJS)))
 ifneq "$($(@F)_LIBS)" ""
	$(file >> $(@F).lnk,\
		library $(subst $ ,$,\n$ ,$($(@F)_LIBS)))
 endif
	$(file >> $(@F).lnk,\
		name $(basename $(@)))
	$(LINK) @$(@F).lnk
endif

# Set a variable to the name main target (the exe) being built
ifneq '$(TARGNAMES)' ''
.PHONY: $(TARGNAMES)
$(TARGNAMES):
	$(eval T=$(@F))
endif



#_812
# Build libraries
ifneq "$(LIBS)" ""
$(addsuffix .lib,$(LIBS)): %.lib: $(MAKEFILE_LIST) $$($$*_OBJS)
	$(info will make $@ from $($*_OBJS))
	$(if $($*_OBJS),,\
		$(error 1 Makefile error: no object files given for library $*)\
	)
 ifdef SHOW_REASONS
	$(warning $(if $(wildcard $@),\
		$@ <- $?,\
		$@ <- (does not exist)\
	))
 endif
	$(LIBEXE) /q /n /b $@ $($*_OBJS)
endif

# Visit subdirs and make there
define do_subsystems
 $(eval SUBTARG=($1))
 $(foreach SYSTEM,$(SUBSYSTEMS),\
  $(shell $(MAKE) $(MFLAGS) -C $(SYSTEM) $(SUBTARG))\
 )
endef



#_845
# Clean up temp & intermediary files

CLEAN_TARGS := $(CLEAN_TARGS) $(TEST_EXES) $(PROG_EXES) $(LIB_LIBS)

.PHONY: clean
clean:
	$(call do_subsystems,$@)	
	$(foreach CLTARG,$(CLEAN_TARGS),\
		$(if $(wildcard $(CLTARG)),\
			del $(CLTARG),\
		)\
	)



#_889
# Local install
.PHONY: linstall
linstall:	$(addprefix .\,$(INSTALL_TARGS))
	$(foreach TARG,$(INSTALL_TARGS),\
	 	@rem figure out where to install to\
		$(if $(suffix $(TARG)),,\
			$(error Error: don't know where to install $(TARG))\
		)\
		$(if $(filter $(LIBEXT),$(suffix $(TARG))),\
	    	$(eval INST_DIRS=$(LIBDIRLOCAL_INST)),\
		)\
		$(if $(filter $(TOOLSEXT),$(suffix $(TARG))),\
			$(error Error: Can't local install tools ($(TARG)))\
		)\
		$(if $(filter-out $(LIBSEXT) $(TOOLSEXT),$(suffix $(TARG))),,\
			$(error Error: don't know where to install $(TARG))\
		)\
		$(shell copy $(TARG) $(LIBDIRLOCAL_INST) > NUL)\
		$(info Installing $(TARG) to $(LIBDIRLOCAL_INST))\
	)




#_942
# Local Install for just headers
.PHONY: linstallh
linstallh:	$(addprefix .\,$(filter %.h %.inc,$(INSTALL_TARGS)))
	$(foreach TARG,$?,\
		$(shell copy $(TARG) $(LIBDIRLOCAL_INST) > NUL)\
		$(info Installing $(TARG) to $(LIBDIRLOCAL_INST))\
	)
