INI_FILE ?= $(MINER)/init/inferno.ini

# Load this person's personal settings
include $(INI_FILE)

# Compiler and assembler defines

SHELL=sh
SEP ?= /

#_147
# Kill annoying built-in rules
.SUFFIXES:


# Directory definitions
LIBDIR = $(MINER)/source/lib
TOOLSDIR = $(MINER)/tools
GAMEDIR = $(MINER)/game


#_349
# What extensions get installed where
LIBEXT = .lib .h .inc
TOOLSEXT = .exe

# Set object file directory if not already set
OBJDIR ?= ./obj

# generate list of objs for each target
$(foreach target,$(LIBS) $(PROGS) $(TEST_PROGS) $(GAMES),\
 $(eval $(target)_OBJS = $(addprefix $(OBJDIR)/,$(addsuffix .obj,$(basename $($(target)_SRCS)))))\
 $(eval ALLOBJS += $($(target)_OBJS))\
 $(eval ALLDIRS += $($(target)_DIRS))\
)

$(foreach GAME,$(GAMES),\
 $(eval GAME_DATA += $($(GAME)_DATA))\
)

#_362
# Set make's search paths
vpath %.h . $(LIBDIR) $(ALLDIRS)
vpath %.inc . $(LIBDIR) $(ALLDIRS)
vpath %.lib . $(LIBDIR) $(EXTLIBS)
vpath %.c $(ALLDIRS)

#_411
# Generate lists of targets with extentions 
TEST_EXES = $(addsuffix .exe,$(TEST_PROGS))
LIB_LIBS = $(addsuffix .lib,$(LIBS))
PROG_EXES = $(addsuffix .exe,$(PROGS))
GAME_EXES = $(addsuffix .exe,$(GAMES))

INSTALL_TARGS += $(PROG_EXES) $(GAME_EXES) $(GAME_DATA)

#_427
ALL_EXES = $(TEST_EXES) $(PROG_EXES) $(GAME_EXES)

# Default target if none specified in makefile
.PHONY: all
all:	$(LIB_LIBS) $(PROG_EXES) $(GAME_EXES)
	$(do_subsystems)

# Target like all that also builds test progs
.PHONY: test
test:	$(LIB_LIBS) $(PROG_EXES) $(TEST_EXES) $(GAME_EXES)
	$(do_subsystems)



# Force include of settings for all files
GLOBAL_INCFILES += settings.h

CLEAN_TARGS += $(LIBDIR)/settings.h $(LIBDIR)/vers_id.h

# Check various settings for conflicts
ifdef BUILD_EDITOR
 ifdef NDEBUG
  $(error 1 Error in $(INI_FILE): If BUILD_EDITOR defined, NDEBUG must not be.)
 endif
endif
ifdef ARCADE
 ifndef NEWDEMO
  $(error 1 Error in $(INI_FILE): ARCADE option requires that NEWDEMO also be set.)
 endif
endif
ifdef DEMO_ONLY
 ifndef NEWDEMO
  $(error 1 Error in $(INI_FILE): DEMO_ONLY defined, but NEWDEMO not.)
 endif
endif


# Set up personal settings
$(LIBDIR)/settings.h: $(INI_FILE) #$(MAKEFILE_LIST)
ifdef SHOW_REASONS
	$(info $(if $(wildcard $@),\
		$(@F) <- $(?F),\
		$(@F) <- (does not exist)\
	))
endif
	@echo "// ">$(LIBDIR)/settings.h
	@echo "// Auto-generated include file ">>$(LIBDIR)/settings.h
	@echo "// Generated by MAKE from $(INI_FILE) settings">>$(LIBDIR)/settings.h
	@echo "// ">>$(LIBDIR)/settings.h
	@echo >>$(LIBDIR)/settings.h
	@echo "#define NEWDEMO			//Demo is always IN ">>$(LIBDIR)/settings.h
	@echo >>$(LIBDIR)/settings.h
	$(eval _IVAR=BUILD_EDITOR)$(eval _SVAR=EDITOR)$(def_setting)
	$(eval _IVAR=RELEASE_VERSION)$(eval _SVAR=RELEASE)$(def_setting)
	$(eval _IVAR=SHAREWARE)$(def_setting)
	$(eval _IVAR=ARCADE)$(def_setting)
	$(eval _IVAR=DEMO_ONLY)$(def_setting)
	$(eval _IVAR=NDEBUG)$(def_setting)
	$(eval _IVAR=NMONO)$(def_setting)
	$(eval _IVAR=MARK_ON)$(eval _SVAR=_MARK_ON)$(def_setting)
	$(eval _IVAR=PASSWORD)$(eval _SVAL=$(PASSWORD))$(def_setting)
	$(eval _IVAR=STORE_DEMO)$(def_setting)
	$(eval _IVAR=PIGGY_NO_PAGING)$(eval _SVAR=PIGGY_USE_PAGING)$(def_setting2)
	$(eval _IVAR=DEST_SAT)$(def_setting)
	$(eval _IVAR=REQUIRE_CD)$(def_setting)
	$(eval _IVAR=USE_CD)$(def_setting)
	$(eval _IVAR=ROCKWELL_CODE)$(def_setting)
	$(eval _IVAR=COMPACT_SEGS)$(def_setting)
	$(eval _IVAR=NO_MULTIPLAYER)$(eval _SVAR=NETWORK)$(def_setting2)
	$(eval _IVAR=USE_COMMLIB)$(def_setting)


# Subroutine to add lines to SETTINGS.H
define def_setting
 $(if $(_SVAR),,$(eval _SVAR=$(_IVAR)))
 $(if $(_SVAL),,$(eval _SVAL=1))
 $(if $(_IVAL),\
  $(if $(filter $($(_IVAR)),$(_IVAL)),\
	@echo "#define $(_SVAR) $(_SVAL)			//$(_IVAR) == $(_IVAL)  ">>$(LIBDIR)/settings.h\
  ,\
	@echo "//#define $(_SVAR)			//$(_IVAR) != $(_IVAL) ">>$(LIBDIR)/settings.h\
  )\
 ,\
  $(if $($(_IVAR)),\
	@echo "#define $(_SVAR) $(_SVAL)			//$(_IVAR) set">>$(LIBDIR)/settings.h\
  ,\
	@echo "//#define $(_SVAR)			//$(_IVAR) not set">>$(LIBDIR)/settings.h\
  )\
 )
 $(eval _SVAR =)
 $(eval _SVAL =)
 $(eval _IVAL =)
endef

# Version of def_settings to add line if variable NOT set (or not equal)
define def_setting2
 $(if $(_SVAR),,$(eval _SVAR = $(_IVAR)))
 $(if $(_SVAL),,$(eval _SVAL=1))
 $(if $(_IVAL),\
  $(if $(filter $($(_IVAR)),$(_IVAL)),\
	@echo "//#define $(_SVAR)			//$(_IVAR) != $(_IVAL) ">>$(LIBDIR)/settings.h\
  ,\
	@echo "#define $(_SVAR) $(_SVAL)			//$(_IVAR) == $(_IVAL)  ">>$(LIBDIR)/settings.h\
  )\
 ,\
  $(if $($(_IVAR)),\
	@echo "//#define $(_SVAR)			//$(_IVAR) set">>$(LIBDIR)/settings.h\
  ,\
	@echo "#define $(_SVAR) $(_SVAL)			//$(_IVAR) not set">>$(LIBDIR)/settings.h\
  )\
 )
 $(eval _SVAR =)
 $(eval _SVAL =)
endef


VERSION_NAME ?= Internal Development ($(USER))
ifdef SHAREWARE
 VERSION_TYPE = SHAREWARE
else ifdef DEST_SAT
 VERSION_TYPE = OEM
else
 VERSION_TYPE = REGISTERED
endif


#set up serial number and name header file
$(LIBDIR)/vers_id.h: $(INI_FILE) #$(MAKEFILE_LIST)
ifdef SHOW_REASONS
	$(info $(if $(wildcard $@),\
		$(@F) <- $(?F),\
		$(@F) <- (does not exist)\
	))
endif
	@echo "// ">$(LIBDIR)/vers_id.h
	@echo "// Auto-generated include file ">>$(LIBDIR)/vers_id.h
	@echo "// Generated by MAKE from $(INI_FILE) settings ">>$(LIBDIR)/vers_id.h
	@echo "// ">>$(LIBDIR)/vers_id.h
	@echo >>$(LIBDIR)/vers_id.h
	@echo >>$(LIBDIR)/vers_id.h
	@echo "#define VERSION_NAME	\"$(VERSION_NAME)\" ">>$(LIBDIR)/vers_id.h
	@echo "#define VERSION_TYPE	\"$(VERSION_TYPE)\" ">>$(LIBDIR)/vers_id.h
	@echo >>$(LIBDIR)/vers_id.h



#_477
# Compiler and assembler defines

ifeq "$(COMPILER)" "WATCOM"

# Make sure we're set up for Watcom C
ifndef WATCOM
$(error 1 Make error: Watcom not set up (run WATCOM batch file))
endif

INCPATH += . $(LIBDIR) $(EXTLIBS) $(WATCOM)/h $(WATCOM)/h/sys

CC = wcc386
CCENV = WCC386
CFLAGS_STACK = -s	#default is stack checking off
CFLAGS = -zq -zld -w3 -on -oa -zp1 -bt=dos $(addprefix -I=,$(subst /,$(SEP),$(INCPATH))) $(CFLAGS_DEBUG) $(CFLAGS_OPT) $(GLOBAL_CFLAGS) $(CFLAGS_STACK) $(CFLAGS_MONO) -fo=$(subst /,$(SEP),$@)

ifdef GLOBAL_INCFILES
CFLAGS += -fi=$(GLOBAL_INCFILES)
endif

LIBEXE = wlib
LINK = wlink

endif

ifeq "$(ASSEMBLER)" "MASM"

# Flags for MASM 6.1
AS = ml
AFLAGS = /c /W3 /Zd /nologo $(addprefix /I,$(subst /,$(SEP),$(INCPATH))) $(AFLAGS_DEBUG) $(GLOBAL_AFLAGS) /Fo$@
ASENV = ML

else ifeq "$(ASSEMBLER)" "JWASM"

# Flags for JWasm
AS = jwasm
AFLAGS = -c -W3 -Zd -nologo $(addprefix -I,$(INCPATH)) $(AFLAGS_DEBUG) $(GLOBAL_AFLAGS) -Fo$@

else
$(error 1 Make error: Unknown assembler: $(ASSEMBLER))
endif



#_573
LFLAGS = system dos4g
LFLAGS += option quiet $(LFLAGS_DEBUG)




#_656
# Inference rules
$(OBJDIR)/%.obj: %.c
	$(info will make $@ from $<)
ifdef SHOW_REASONS
	$(warning $(if $(wildcard $@),\
		$(@F) <- $(?F),\
		$(@F) <- (does not exist)\
	))
endif
ifdef CCENV
	$(eval export $(CCENV) = $(CFLAGS))
 ifdef SHOW_FLAGS
	$(info $(CC) flags: $($(CCENV)))
 endif
	$(CC) $(subst /,$(SEP),$<)
else
	$(CC) $(CFLAGS) $<
endif

$(OBJDIR)/%.obj: %.asm
	$(info will make $@ from $<)
ifdef SHOW_REASONS
	$(warning $(if $(wildcard $@),\
		$(@F) <- $(?F),\
		$(@F) <- (does not exist)\
	))
endif
ifdef ASENV
	$(eval export $(ASENV) = $(AFLAGS))
 ifdef SHOW_FLAGS
	$(info $(AS) flags: $(AFLAGS))
 endif
	$(AS) $<
else
	$(AS) $(AFLAGS) $<
endif

$(ALLOBJS): $(GLOBAL_INCFILES) | $(OBJDIR)

$(OBJDIR):
	mkdir $(OBJDIR)


.SECONDEXPANSION:


#_750
# Build test programs
ifneq '$(ALL_EXES)' ''
$(ALL_EXES): %.exe: $$($$*_OBJS) $$($$*_LIBS)
	$(if $($*_OBJS),\
		$(info will make $@ from $($*_OBJS) $($*_LIBS)),\
		$(error 1 Makefile error: no object files given for test program $*)\
	)
 ifdef SHOW_REASONS
	$(warning $(if $(wildcard $@),\
		$@ <- $?,\
		$@ <- (does not exist)\
	))
 endif
	@echo "$(LFLAGS) $($*_LFLAGS)" > $*.lnk
	@$(foreach OBJ,$($*_OBJS),echo "file $(OBJ)" >> $*.lnk;)
	@$(foreach LIB,$(filter $(addprefix %,$($*_LIBS)),$^),echo "library $(LIB)" >> $*.lnk;)
	@echo "name $*" >> $*.lnk
	$(LINK) @$*.lnk
endif




#_812
# Build libraries
ifneq "$(LIB_LIBS)" ""
$(LIB_LIBS): %.lib: $$($$*_OBJS)
	$(if $($*_OBJS),\
		$(info will make $@ from $($*_OBJS)),\
		$(error 1 Makefile error: no object files given for library $*)\
	)
 ifdef SHOW_REASONS
	$(warning $(if $(wildcard $@),\
		$@ <- $?,\
		$@ <- (does not exist)\
	))
 endif
	@echo "$(subst /,$(SEP),$($*_OBJS))" > $*.arg
	$(LIBEXE) -q -n -b $@ @$*.arg
endif

#_828
# Visit subdirs and make there
define do_subsystems
@SUBSYSTEMS=($(SUBSYSTEMS)); \
for SYSTEM in "$${SUBSYSTEMS[@]}"; do\
 $(MAKE) -C $$SYSTEM $(MFLAGS) $@;\
done
endef


#_845
# Clean up temp & intermediary files

CLEAN_TARGS := $(ALLOBJS) $(ALL_EXES) $(LIB_LIBS) $(DLL_DLLS) $(CLEAN_TARGS)
.PHONY: clean
clean: SUBSYSTEMS = $(SUBDIRS)
clean:
	$(do_subsystems)
	@CLEAN_TARGS=($(CLEAN_TARGS));\
	for CLTARG in "$${CLEAN_TARGS[@]}"; do\
	 rm -f $$CLTARG>NUL;\
	done

really-clean: SUBSYSTEMS = $(SUBDIRS)
really-clean: clean
	$(do_subsystems)
	rm -f *.obj *.err *.arg *.lnk *.bak *.map>NUL


.PHONY: install
install: SUBSYSTEMS = $(SUBDIRS)
install:	$(filter $(PROG_EXES) $(GAME_EXES) $(GAME_DATA),$(INSTALL_TARGS))
	$(do_subsystems)
	$(foreach TARG,$^, \
	 $(eval DEST=$(if $(filter $(GAME_EXES) $(GAME_DATA),$(TARG)),$(GAMEDIR),$(TOOLSDIR))) \
	 cp $(TARG) $(DEST); \
	 echo Installing $(TARG) to $(DEST); \
	)


#_889
# Local install
.PHONY: linstall
linstall:	$(filter $(addprefix %,$(LIBEXT)),$(INSTALL_TARGS)) | $(LIBDIR)
	$(do_subsystems)
	@TARGETS=($^);\
	for TARG in "$${TARGETS[@]}"; do\
	 $(INSTALL) $$TARG $(LIBDIR);\
	done


#_942
# Local Install for just headers
.PHONY: linstallh
linstallh:	$(filter %.h %.inc,$(INSTALL_TARGS)) | $(LIBDIR)
	$(do_subsystems)
	@TARGETS=($^);\
	for TARG in "$${TARGETS[@]}"; do\
	 $(INSTALL) $$TARG $(LIBDIR);\
	done

$(LIBDIR):
	mkdir $(LIBDIR)
