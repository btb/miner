# Compiler and assembler defines

SHELL=sh
SEP ?= /

#_147
# Kill annoying built-in rules
.SUFFIXES:


# Directory definitions
LIBDIR = $(MINER)/source/lib
TOOLSDIR = $(MINER)/tools
GAMEDIR = $(MINER)/game


#_349
# What extensions get installed where
LIBEXT = .lib .h .inc
TOOLSEXT = .exe

# Set object file directory if not already set
OBJDIR ?= ./obj

# generate list of objs for each target
$(foreach target,$(LIBS) $(PROGS) $(TEST_PROGS) $(GAMES),\
 $(eval $(target)_OBJS = $(addprefix $(OBJDIR)/,$(addsuffix .obj,$(basename $($(target)_SRCS)))))\
 $(eval ALLOBJS += $($(target)_OBJS))\
 $(eval ALLDIRS += $($(target)_DIRS))\
)

$(foreach GAME,$(GAMES),\
 $(eval GAME_DATA += $($(GAME)_DATA))\
)

#_362
# Set make's search paths
vpath %.h . $(LIBDIR) $(ALLDIRS)
vpath %.inc . $(LIBDIR) $(ALLDIRS)
vpath %.lib . $(LIBDIR) $(EXTLIBS)
vpath %.c $(ALLDIRS)

#_411
# Generate lists of targets with extentions 
TEST_EXES = $(addsuffix .exe,$(TEST_PROGS))
LIB_LIBS = $(addsuffix .lib,$(LIBS))
PROG_EXES = $(addsuffix .exe,$(PROGS))
GAME_EXES = $(addsuffix .exe,$(GAMES))

INSTALL_TARGS += $(GAME_EXES) $(GAME_DATA)

#_427
ALL_EXES = $(TEST_EXES) $(PROG_EXES) $(GAME_EXES)

# Default target if none specified in makefile
.PHONY: all
all:	$(LIB_LIBS) $(PROG_EXES) $(GAME_EXES)
	$(do_subsystems)

# Target like all that also builds test progs
.PHONY: test
test:	$(LIB_LIBS) $(PROG_EXES) $(TEST_EXES) $(GAME_EXES)
	$(do_subsystems)




#_477
# Compiler and assembler defines

ifeq "$(COMPILER)" "WATCOM"

# Make sure we're set up for Watcom C
ifndef WATCOM
$(error 1 Make error: Watcom not set up (run WATCOM batch file))
endif

SEP = \$()
INCPATH += . $(LIBDIR) $(EXTLIBS) $(WATCOM)/h $(WATCOM)/h/sys

CC = wcc386
CCENV = WCC386
CFLAGS_STACK = /s	#default is stack checking off
CFLAGS = /zq /zld /w3 /on /oa $(addprefix /I=,$(subst /,\,$(INCPATH))) $(CFLAGS_DEBUG) $(CFLAGS_OPT) $(GLOBAL_CFLAGS) $(CFLAGS_STACK) $(CFLAGS_MONO) /fo=$(subst /,\,$@)

ifdef GLOBAL_INCFILES
CFLAGS += /fi=$(GLOBAL_INCFILES)
endif

LIBEXE = wlib
LINK = wlink


else ifeq "$(COMPILER)" "OPENWATCOM"

# Make sure we're set up for Watcom C
ifndef WATCOM
$(error 1 Make error: Watcom not set up (run WATCOM batch file))
endif

INCPATH += . $(LIBDIR) $(EXTLIBS) $(WATCOM)/h $(WATCOM)/h/sys

CC = wcc386
# CCENV = WCC386
CFLAGS_STACK = -s	#default is stack checking off
CFLAGS = -zq -zld -w3 -ef -on -oa $(addprefix -i=,$(INCPATH)) $(CFLAGS_DEBUG) $(CFLAGS_OPT) $(GLOBAL_CFLAGS) $(CFLAGS_STACK) $(CFLAGS_MONO) -fo=$@

ifdef GLOBAL_INCFILES
CFLAGS += -fi=$(GLOBAL_INCFILES)
endif

LIBEXE = wlib
LINK = wlink

endif

ifeq "$(ASSEMBLER)" "MASM"

# Flags for MASM 6.1
AS = ml
AFLAGS = /c /W3 /Zd /nologo $(addprefix /I,$(subst /,\,$(INCPATH))) $(AFLAGS_DEBUG) $(GLOBAL_AFLAGS) /Fo$@
ASENV = ML

else ifeq "$(ASSEMBLER)" "JWASM"

# Flags for JWasm
AS = jwasm
AFLAGS = -c -W3 -Zd -nologo $(addprefix -I,$(INCPATH)) $(AFLAGS_DEBUG) $(GLOBAL_AFLAGS) -Fo$@

else
$(error 1 Make error: Unknown assembler: $(ASSEMBLER))
endif



#_573
LFLAGS = system dos4g
LFLAGS += option quiet $(LFLAGS_DEBUG)




#_656
# Inference rules
$(OBJDIR)/%.obj: %.c
	$(info will make $@ from $<)
ifdef SHOW_REASONS
	$(warning $(if $(wildcard $@),\
		$(@F) <- $(?F),\
		$(@F) <- (does not exist)\
	))
endif
ifdef CCENV
	$(eval export $(CCENV) = $(CFLAGS))
 ifdef SHOW_FLAGS
	$(info $(CC) flags: $($(CCENV)))
 endif
	$(CC) $(subst /,$(SEP),$<)
else
	$(CC) $(CFLAGS) $<
endif

$(OBJDIR)/%.obj: %.asm
	$(info will make $@ from $<)
ifdef SHOW_REASONS
	$(warning $(if $(wildcard $@),\
		$(@F) <- $(?F),\
		$(@F) <- (does not exist)\
	))
endif
ifdef ASENV
	$(eval export $(ASENV) = $(AFLAGS))
 ifdef SHOW_FLAGS
	$(info $(AS) flags: $(AFLAGS))
 endif
	$(AS) $<
else
	$(AS) $(AFLAGS) $<
endif

$(ALLOBJS): | $(OBJDIR)

$(OBJDIR):
	mkdir $(OBJDIR)


.SECONDEXPANSION:


#_750
# Build test programs
ifneq '$(ALL_EXES)' ''
$(ALL_EXES): %.exe: $$($$*_OBJS) $$($$*_LIBS)
	$(if $($*_OBJS),\
		$(info will make $@ from $($*_OBJS) $($*_LIBS)),\
		$(error 1 Makefile error: no object files given for test program $*)\
	)
 ifdef SHOW_REASONS
	$(warning $(if $(wildcard $@),\
		$@ <- $?,\
		$@ <- (does not exist)\
	))
 endif
	$(file > $*.lnk,$(LFLAGS) $($*_LFLAGS))
	$(foreach OBJ,$($*_OBJS),$(file >> $*.lnk,file $(OBJ)))
	$(foreach LIB,$(filter $(addprefix %,$($*_LIBS)),$^),$(file >> $*.lnk,library $(LIB)))
	$(file >> $*.lnk,name $*)
	$(LINK) @$*.lnk
endif




#_812
# Build libraries
ifneq "$(LIB_LIBS)" ""
$(LIB_LIBS): %.lib: $$($$*_OBJS)
	$(if $($*_OBJS),\
		$(info will make $@ from $($*_OBJS)),\
		$(error 1 Makefile error: no object files given for library $*)\
	)
 ifdef SHOW_REASONS
	$(warning $(if $(wildcard $@),\
		$@ <- $?,\
		$@ <- (does not exist)\
	))
 endif
	$(file > $*.arg, $(subst /,$(SEP),$($*_OBJS)))
	$(LIBEXE) -q -n -b $@ @$*.arg
endif

#_828
# Visit subdirs and make there
define do_subsystems
@SUBSYSTEMS=($(SUBSYSTEMS)); \
for SYSTEM in "$${SUBSYSTEMS[@]}"; do\
 $(MAKE) -C $$SYSTEM $(MFLAGS) $@;\
done
endef


#_845
# Clean up temp & intermediary files

CLEAN_TARGS := $(ALLOBJS) $(ALL_EXES) $(LIB_LIBS) $(DLL_DLLS) $(CLEAN_TARGS)
.PHONY: clean
clean: SUBSYSTEMS = $(SUBDIRS)
clean:
	$(do_subsystems)
	@CLEAN_TARGS=($(CLEAN_TARGS));\
	for CLTARG in "$${CLEAN_TARGS[@]}"; do\
	 rm -f $$CLTARG>NUL;\
	done

really-clean: SUBSYSTEMS = $(SUBDIRS)
really-clean: clean
	$(do_subsystems)
	rm -f *.obj *.err *.arg *.lnk *.bak *.map>NUL


.PHONY: install
install: SUBSYSTEMS = $(SUBDIRS)
install:	$(filter $(PROG_EXES) $(GAME_EXES) $(GAME_DATA),$(INSTALL_TARGS))
	$(do_subsystems)
	@TARGETS=($^);\
	for TARG in "$${TARGETS[@]}"; do\
	 DEST=$(if $(filter $(GAME_EXES) $(GAME_DATA),$^),$(GAMEDIR),$(TOOLSDIR));\
	 cp $$TARG $$DEST;\
	 echo Installing $$TARG to $$DEST;\
	done


#_889
# Local install
.PHONY: linstall
linstall:	$(filter $(addprefix %,$(LIBEXT)),$(INSTALL_TARGS)) | $(LIBDIR)
	$(do_subsystems)
	@TARGETS=($^);\
	for TARG in "$${TARGETS[@]}"; do\
	 $(INSTALL) $$TARG $(LIBDIR);\
	done


#_942
# Local Install for just headers
.PHONY: linstallh
linstallh:	$(filter %.h %.inc,$(INSTALL_TARGS)) | $(LIBDIR)
	$(do_subsystems)
	@TARGETS=($^);\
	for TARG in "$${TARGETS[@]}"; do\
	 $(INSTALL) $$TARG $(LIBDIR);\
	done

$(LIBDIR):
	mkdir $(LIBDIR)
